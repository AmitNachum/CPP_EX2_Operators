In order to Divide one matrix by another we simply multiplying by the inverse of that matrix.
By the Determinant property, Matrix A will have an inverse If and only If Det(A) does not
equal to zero.


After Adding this check by using the determinant operator as part of the project,I had 3 choices:
1.Using Gausse ELimination's Row reduction.
2.Adjugate cofactor method.
3.LU decomposition.


I have chosen to use the Adjugate cofactor method,and so here is the AI Prompt.

Me:

Hmm ok now we are now moving to Matrices Divisions, which is basically multiplying by the invert matrix.
Please do not provide the code.
How can I do that.


ChatGPT:

That’s the spirit, Amit! 💪
If you want to implement matrix division via multiplication by the inverse, here’s the high-level roadmap — no code, just structured guidance:

✅ Step-by-Step Plan for Matrix Division
1. Define the meaning of division
Matrix division is not directly defined, so you interpret:

A / B  ≡  A * inverse(B)
Where:

A is the matrix being divided

B is the divisor matrix

inverse(B) is the multiplicative inverse of B

2. Ensure B is invertible
Before doing anything:

Check if det(B) ≠ 0

Only square, full-rank matrices can be inverted

3. Compute the inverse
To invert B, you’ll need:

A function inverse() that returns the inverse of a matrix

You can implement it using:

Gaussian elimination (e.g., augment with identity)

Cofactor & adjugate + 1/det

LU decomposition (advanced)

Pick the one you like to challenge yourself with 😎

4. Perform A * inverse(B)
Once you have the inverse:

Just reuse your existing operator*

Implement operator/(const squaredMatrix&) based on that

🧠 Bonus Tips
Handle edge cases: singular matrix (non-invertible), size mismatch

Make sure your inverse logic is numerically stable (especially for float/double)

Consider caching determinant if computing it twice (det + inverse)

Let me know when you’ve got the inverse function cooking — happy to help validate your math or double-check the matrix augment process. You're on 🔥, keep pushing!


Steps for Adjugate cofactor method:

1.Check that det(A) ≠ 0

Build the cofactor matrix
For each element a_ij, compute its minor determinant, then multiply by (-1)^(i+j) to get the cofactor.

Transpose the cofactor matrix
This gives you the adjugate matrix.

Divide the adjugate by the determinant
And that is the inverse Matrix.





AI Prompt for coloring:

Me:
Ok please show me the code for green coloring and blue coloring
in the print statments

ChatGPT:
Great work so far! To answer your question:

✅ Blue and Green ANSI Color Codes in cout:
These are ANSI escape sequences that modify text appearance in terminals that support them.

💙 Blue:
cpp
Copy
Edit
cout << "\033[1;34m=== Title ===\033[0m\n";
\033 = escape character (can also be written as \x1B)

[1;34m = bold (1) + blue (34)

\033[0m = reset to default color

💚 Green:
cpp
Copy
Edit
cout << "\033[1;32m=== Title ===\033[0m\n";
[1;32m = bold (1) + green (32)

📝 Example Use in Code:
cpp
Copy
Edit
cout << "\033[1;32m===Arithmetic operations===\033[0m\n";
cout << "\033[1;34m===Matrix 1===\033[0m\n";
You already used both in your Matrix Tests file. If you want to change other headings to green (or any other color), just switch their escape sequences as shown above.

Let me know if you’d like other styles too (like underline, red, or even background colors).







